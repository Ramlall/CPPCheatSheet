
3 Introduction - this cheat sheet is to remember C++ language features quickly for algorithm contests

# Data structures

array
vector
queue
stack
priority queue
set
unordered map
comparison of nodes


# Algorithms

bfs
dfs

All includes



///////////////////////////////////////////////////////
////////// VECTOR ////////////////////////////////////
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

// Pass by reference
void Print(vector< vector<int> > &inceptionvec)
    {
    cout << "Vector of vectors: " << endl;
    // Go through each row
    for(int i = 0; i < inceptionvec.size(); i++)
        {
        // Go through each column
        for(int j = 0; j < inceptionvec[i].size(); j++)
            {
            cout << inceptionvec[i][j] << " ";
            }
        cout << endl;
        }
    }

int main() 
    {
    cout << "C++ Vector Code" << endl;
    
    // Create a vector
    vector<int> myvec;
    
    // Add some numbers to the vector
    myvec.push_back(4);
    myvec.push_back(3);
    myvec.push_back(2);
    myvec.push_back(1);
    
    // Sort the vector.
    std::sort(myvec.begin(), myvec.begin()+myvec.size());
    
    // Print the sorted vector.
    cout << "Sorted vector: " << endl;
    for(int i = 0; i < myvec.size(); i++)
        {
        cout << myvec[i] << " ";
        }
    cout << endl << endl;
    
    // Create a vector of vectors
    vector< vector<int> > inceptionvec;
    // Fill the vectors.
    int counter = 0;
    for(int i = 0; i < 3; i++)
        {
        // Create a row and add it to the vector.
        vector<int> row;
        inceptionvec.push_back(row);
        for(int j = 0; j < 3; j++)
            {
            counter += 1;
            
            // Add this counter to the row
            inceptionvec[i].push_back(counter);
            }
        }
    
    // Print our vector of vectors.
    Print(inceptionvec);
    }
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
////////// Queue ////////////////////////////////////
#include <iostream>
#include <queue>

using namespace std;

int main() 
    {
    cout << "C++ Queue Code" << endl;
    
    // Create a queue
    queue<int> myqueue;
    
    // Add some numbers to the queue
    myqueue.push(1);
    myqueue.push(2);
    myqueue.push(3);
    myqueue.push(4);
    
    // Print each number and remove it from the queue
    cout << "Printed queue: " << endl;
    while(myqueue.empty() == false)
        {
        int mynum = myqueue.front();
        cout << mynum << " ";
        myqueue.pop();
        }
    cout << endl;
    
    }
///////////////////////////////////////////////////////


///////////////////////////////////////////////////////
////////// Stack ////////////////////////////////////
#include <iostream>
#include <stack>

using namespace std;

int main() 
    {
    cout << "C++ Stack Code" << endl;
    
    // Create a stack
    stack<int> mystack;
    
    // Add some numbers to the queue
    mystack.push(4);
    mystack.push(3);
    mystack.push(2);
    mystack.push(1);
    
    // Print each number and remove it from the stack
    cout << "Printed stack: " << endl;
    while(mystack.empty() == false)
        {
        int mynum = mystack.top();
        cout << mynum << " ";
        mystack.pop();
        }
    cout << endl;
    
    }
///////////////////////////////////////////////////////